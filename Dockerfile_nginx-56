# First stage : download glpi + build it
FROM composer:latest as build_glpi

ARG GLPI_VERSION
ARG GLPI_PATHS_ROOT=/var/www

RUN mkdir -p "${GLPI_PATHS_ROOT}"
RUN curl -v --fail -o glpi.tgz -L "https://github.com/glpi-project/glpi/releases/download/${GLPI_VERSION}/glpi-${GLPI_VERSION}.tgz" \
    && tar -xzf glpi.tgz --strip 1 --directory ${GLPI_PATHS_ROOT}

WORKDIR "${GLPI_PATHS_ROOT}"

RUN curl --fail --remote-name-all \
      https://raw.githubusercontent.com/glpi-project/glpi/${GLPI_VERSION}/composer.json \
      https://raw.githubusercontent.com/glpi-project/glpi/${GLPI_VERSION}/composer.lock \
    && COMPOSER_HOME=/tmp/composer composer require \
      --apcu-autoloader \
      --classmap-authoritative \
      --ignore-platform-reqs \
      --no-interaction \
      --no-progress \
      --no-suggest \
      --optimize-autoloader \
      --prefer-dist \
      --update-no-dev \
      --working-dir ${GLPI_PATHS_ROOT} \
      apereo/phpcas \
    && rm -fv composer.json composer.lock


# Second stage : build final image
FROM php:5.6-fpm-alpine3.8

LABEL maintainer='Pierre GINDRAUD <pgindraud@gmail.com>'

ARG GLPI_VERSION

ENV GLPI_VERSION "${GLPI_VERSION}"
ENV GLPI_PATHS_ROOT /var/www
ENV GLPI_PATHS_PLUGINS /var/www/plugins
ENV GLPI_REMOVE_INSTALLER no
ENV GLPI_CHMOD_PATHS_FILES no
ENV GLPI_INSTALL_PLUGINS ''

# Install dependencies
RUN set -ex; \
    apk --no-cache add \
      curl \
      nginx \
      fping \
      graphviz \
      iputils \
      net-snmp-libs \
      py3-jinja2 \
      supervisor \
      tar \
      tzdata \
    ; \
    pip3 install \
      j2cli \
    ; \
    apk add --no-cache --virtual .build-deps \
        $PHPIZE_DEPS \
        autoconf \
        coreutils \
        curl-dev \
        freetype-dev \
        icu-dev \
        imap-dev \
        libevent-dev \
        libjpeg-turbo-dev \
        libmcrypt-dev \
        libpng-dev \
        libxml2-dev \
        net-snmp-dev \
        openldap-dev \
        pcre-dev \
        imagemagick-dev \
    ; \
    docker-php-source extract ; \
    docker-php-ext-configure gd --with-freetype-dir=/usr --with-png-dir=/usr --with-jpeg-dir=/usr; \
    docker-php-ext-configure ldap ; \
    docker-php-ext-install \
       exif \
       gd \
       imap \
       ldap \
       mysqli \
       opcache \
       snmp \
       soap \
       xmlrpc \
    ; \
    pecl install apcu-4.0.11 && docker-php-ext-enable apcu ; \
    docker-php-source delete ; \
    runDeps="$( \
        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
            | tr ',' '\n' \
            | sort -u \
            | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
    )"; \
    apk add --virtual .nextcloud-phpext-rundeps $runDeps; \
    apk del .build-deps ; \
    mkdir -p /run/nginx ; \
    find "${GLPI_PATHS_ROOT}" -mindepth 1 -maxdepth 1 -not -name '.*' -and -not -name '..' | xargs rm -rfv

# Copy glpi build
COPY --from=build_glpi --chown=www-data:www-data ${GLPI_PATHS_ROOT} ${GLPI_PATHS_ROOT}

# Add some configurations files
COPY root/ /
COPY /docker-entrypoint.sh /
COPY /docker-entrypoint.d/* /docker-entrypoint.d/

RUN chmod -R +x /docker-entrypoint.d/ \
    && chmod -R g=rX,o=--- /var/www/* \
    && addgroup nginx www-data

EXPOSE 80/tcp
VOLUME ["/var/www/files", "/var/www/config"]
WORKDIR "${GLPI_PATHS_ROOT}"

HEALTHCHECK --interval=5s --timeout=3s --retries=3 \
    CMD curl --silent http://127.0.0.1:80/fpm-ping | grep --quiet pong || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["/usr/bin/supervisord", "--configuration", "/etc/supervisord.conf"]
